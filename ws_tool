#!/usr/bin/env python3
import os
import sys
from Xlib import X
from Xlib.display import Display
from Xlib.protocol.event import ClientMessage

display = None
root = None
number_of_desktops_atom = None
current_desktop_atom = None


class Action:
  def get ():
    print ("Number of workspaces:", get_number_of_desktops ())
    print ("Current workspace:   ", get_current_desktop () + 1)


  def set (ws):
    N = get_number_of_desktops ()
    if ws - 1 not in range (N):
      print ("Workspace number must be between 1 and", N)
      return
    data = (ws - 1).to_bytes (4, sys.byteorder).ljust (20)
    event = ClientMessage (
      window = root,
      client_type = current_desktop_atom,
      data = (32, data)
    )
    root.send_event (event, event_mask=X.SubstructureRedirectMask)
    # Without this the window manager does not receive a ClientMessage event???
    get_current_desktop ()
    print (f"Switched to workspace {ws}")


  def format (inactive, active, join):
    N = get_number_of_desktops ()
    C = get_current_desktop ()
    print ((join or ' ').join (
      [inactive, active][i==C].format (w=i+1) for i in range (N)))


def get_number_of_desktops ():
  prop = root.get_full_property (number_of_desktops_atom, X.AnyPropertyType)
  return prop.value[0]


def get_current_desktop ():
  prop = root.get_full_property (current_desktop_atom, X.AnyPropertyType)
  return prop.value[0]


def parse_args ():
  args = sys.argv[1:]
  class Args:
    action = None
    args = tuple ()
  if len (args) == 0:
    usage ()
  elif args[0] == "get":
    Args.action = Action.get
  elif args[0] == "set":
    Args.action = Action.set
    if len (args) != 2:
      usage ("set")
    try:
      Args.args = (int (args[1]), )
    except ValueError:
      usage ("set")
  elif args[0] == "format":
    Args.action = Action.format
    if len (args) != 3 and len (args) != 4:
      usage ("format")
    Args.args = (args[1], args[2], (args[3] if len (args) == 4 else None))
  return Args


def usage (action=None):
  if action is None:
    print ("Usage: ws_tool {get|set|format}");
  elif action == "set":
    print ("Usage: ws_tool set WS")
    print ("  Set the current workspace to WS (first is 1)")
  elif action == "format":
    print ("Usage: ws_tool format INACTIVE ACTIVE [JOIN]")
    print ("  Where INACTIVE and ACTIVE are the format strings for inactive/active workspaces.")
    print ("  Format strings are python-like, {w:...} is replaced with the workspace number")
    print ("  where '...' can be any of the python format specifiers.")
    print ("  Workspaces are joined with JOIN or ' ' if not specified.")
    print ()
    print ("  Exanple: ws_tool format '[{w:<2}]' '({w:>2})' '-'")
    print ("         > '[1 ]-( 2)-[3 ]-[4 ]' (2 is the active workspace)")
  exit (1)


def main ():
  global display, root, number_of_desktops_atom, current_desktop_atom
  args = parse_args ()
  display_address = os.getenv ("DISPLAY")
  if display_address is None:
    print ("No display set")
    return
  display = Display (display_address)
  root = display.screen ().root
  number_of_desktops_atom = display.intern_atom ("_NET_NUMBER_OF_DESKTOPS")
  current_desktop_atom = display.intern_atom ("_NET_CURRENT_DESKTOP")
  args.action (*args.args)

if __name__ == "__main__":
  main ()

